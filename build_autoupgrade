#!/usr/bin/env python2
import fcp
import subprocess
import os.path
import re
import shutil

# Assumes Fred in ../fred; running node with FCP at 9481.

legacy_uri = 'public final static String LEGACY_UPDATE_URI = "{}"'
legacy_uri_match = re.compile(legacy_uri.format('[^"]+'))

update_uri = 'public final static String UPDATE_URI = "{}"'
update_uri_match = re.compile(update_uri.format('[^"]+'))

transition_version = r"public final static int TRANSITION_VERSION = {};"
transition_match = re.compile(transition_version.format(r"(\d+)"))

update_manager_path = "src/freenet/node/updater/NodeUpdateManager.java"


def main():
    starting_build = 1470
    transition_build = starting_build + 1
    continuation_build = starting_build + 2
    node = fcp.FCPNode()
    old_fetch, old_insert = node.genkey()
    new_fetch, new_insert = node.genkey()

    # Node without key transition - its update URI is the old key.
    build("build0{}".format(starting_build), transition_build, starting_build, False,
          None, old_fetch, "{}-freenet.jar".format(starting_build))

    upstream_branch = "java7-legacy-uom"
    # First build updated to.
    build(upstream_branch, transition_build, transition_build, True,
          old_fetch, new_fetch,
          "{}-mandatory-freenet.jar".format(transition_build))

    # Second build updated to.
    build(upstream_branch, transition_build, continuation_build, True,
          old_fetch, new_fetch,
          "{}-mandatory-freenet.jar".format(continuation_build))

    # Requires inserting +1 to old key; +1 and +2 to new.
    # Insert everything into +2 node with local storage of requests enabled.
    print("Old insert: {}".format(old_insert))
    print("Old fetch: {}".format(old_fetch))
    print("New insert: {}".format(new_insert))
    print("New fetch: {}".format(new_fetch))


def build(branch, transition_build, build_number, is_self_mandatory,
          legacy_fetch_key, update_fetch_key, filename):
    starting_dir = os.getcwd()

    subprocess.check_call([
        starting_dir + "/update_version.py",
        str(build_number),
        "../fred/src/freenet/node/Version.java",
    ] + ([
            "--change-mandatory",
            # The date is in the past; the exact value is arbitrary.
            "--date", "2016-01-20"] if is_self_mandatory else
         [
             "--version-only"
    ]))

    os.chdir("../fred")

    subprocess.check_call(["git", "checkout", branch])
    subprocess.check_call(["ant", "clean"])

    if legacy_fetch_key:
        replace(update_manager_path,
                legacy_uri_match, legacy_uri.format(legacy_fetch_key + "jar-"))

    replace(update_manager_path,
            update_uri_match, update_uri.format(
                update_fetch_key.replace("SSK@", "USK@", 1) + "jar/"))

    replace(update_manager_path,
            transition_match, transition_version.format(transition_build))

    subprocess.check_call(["ant", "package-only"])

    shutil.copy("dist/freenet.jar", filename)

    subprocess.check_call(["git", "diff"])

    subprocess.check_call(["git", "checkout", "src/"])
    os.chdir(starting_dir)


def replace(path, match, replacement):
    with open(path, "r") as target:
        text = "".join(target.readlines())

    text, replacements = match.subn(replacement, text)
    if replacements != 1:
        print("Cannot substitute '{}'".format(replacement))
        exit(1)

    with open(path, "w") as target:
        target.write(text)

if __name__ == "__main__":
    main()

#!/bin/bash
# User should put the real keys in $insertKeys (see ~/.freenetrc)
# Format of keys file: NEWKEY=[SSK private URI]
# We used to also include OLDKEY, but this is not used any more, since the transition version is the last build inserted on the old key and the first inserted on the new key.
# Load the shared utility functions.
source freenet-scripts-common || exit
readConfig

SEEDNODESFILE="$releaseDir/seednodes.fref"

getBuildInfo
if [[ -z "$gitVersion" ]]; then echo Could not get git version; exit 1; fi

echo Build number $buildNumber git tag $gitVersion

# The auto-update keys should never, EVER be written to disk in plaintext.
# /tmp is a tmpfs on encrypted swap, right?
# PARANOIA: Maybe we should check :)
KEYS="$(mktemp -d -p /tmp temp.XXXXXXXX)"
if [ ! -f "$countryDataFile" ]; then echo WARNING: Inserting without country data; fi
# Decrypt the keys.
gpg -o $KEYS/keys "$insertKeys" || exit
source $KEYS/keys || exit
TEMPLOC="$(mktemp -d)"
echo Temporary file location: "$TEMPLOC"
# TODO consider just using the source tarball.
# TODO We need to know the version and the gitVersion but that's stored somewhere IIRC.
git clone "$fredDir" "$TEMPLOC" || exit
cd $TEMPLOC
git reset --hard
git checkout "$gitVersion" || exit
cp "$freenetExtPath" lib/freenet-ext.jar || exit
ant clean
FILENAME="$releaseDir/freenet-$gitVersion.jar"
SOURCENAME="$releaseDir/freenet-$gitVersion-source.tar.bz2"
if [[ ! -e "$FILENAME" ]]; then echo Jar not found; exit; fi
if [[ ! -e "$SOURCENAME" ]]; then echo Source not found; exit; fi
echo Inserting update for build number $buildNumber

# SECURITY: Insert via secondary testing node, NOT VIA MAIN NODE
# This avoids the insert keys ever being known to the main node.
for PORT in 9482; do

TEMPFILE1="$(mktemp /tmp/insert.temp.XXXXXXXXXX)"
echo Temp file $TEMPFILE1
echo ClientHello > $TEMPFILE1
echo "Name=Toad-update-$buildNumber" >> $TEMPFILE1
echo ExpectedVersion=2 >> $TEMPFILE1
echo End >> $TEMPFILE1
echo >> $TEMPFILE1

INSTALLERFILE=$releaseDir/new_installer_offline_$buildNumber.jar
WININSTALLERFILE=$releaseDir/FreenetInstaller-$buildNumber.exe

if [[ ! -f "$INSTALLERFILE" ]]
then
  echo Installer file does not exist: "$INSTALLERFILE"
  exit
else
  if [[ ! -f "$WININSTALLERFILE" ]]
  then
    echo Windows installer file does not exist: "$WININSTALLERFILE"
    exit
  fi
fi

for WHAT in binary source installer wininstaller seednodes changelog fullchangelog iptocountryv4; do

# Insert the binary LAST so that the node doesn't restart before completing the insert.
# Of course, you should run this against the testing node which should already be running the new version, so won't restart.
PCLASS=0
URI=NEWKEY
IDENT=update-new-$buildNumber
if [[ $WHAT == "source" ]]; then
  INSERTFILE=$SOURCENAME
  PCLASS=$((PCLASS+3))
  URI=${URI}/update-source-$buildNumber
  IDENT=${IDENT}-source
fi
if [[ $WHAT == "installer" ]]; then
  INSERTFILE=$INSTALLERFILE
  URI=${URI}/installer-$buildNumber
  IDENT=${IDENT}-installer
  PCLASS=$((PCLASS+2))
fi
if [[ $WHAT == "wininstaller" ]]; then
  INSERTFILE=$WININSTALLERFILE
  URI=${URI}/wininstaller-${buildNumber}
  IDENT=${IDENT}-wininstaller
  PCLASS=$((PCLASS+2))
fi
if [[ $WHAT == "binary" ]]; then
  INSERTFILE=$FILENAME
  URI=${URI}/jar-$buildNumber
  PCLASS=$((PCLASS))
fi
if [[ $WHAT == "seednodes" ]]; then
  INSERTFILE=$SEEDNODESFILE
  URI=${URI}/seednodes-$buildNumber
  IDENT=${IDENT}-seednodes
fi
if [[ $WHAT == "changelog" ]]; then
  INSERTFILE=$releaseDir/changelog.short.$gitVersion.txt
  URI=${URI}/changelog-$buildNumber
  IDENT=${IDENT}-changelog
fi
if [[ $WHAT == "fullchangelog" ]]; then
  INSERTFILE=$releaseDir/changelog.full.$gitVersion.txt
  URI=${URI}/fullchangelog-$buildNumber
  IDENT=${IDENT}-fullchangelog
fi
if [[ $WHAT == "iptocountryv4" ]]; then
  INSERTFILE=$countryDataFile
  URI=${URI}/iptocountryv4-$buildNumber
  IDENT=${IDENT}-iptocountryv4
  PCLASS=$((PCLASS+2))
fi
TEMPFILE="$(mktemp /tmp/insert.temp.XXXXXXXXXX)"
echo ClientPut >> $TEMPFILE
# Turn off compression: Limit possibilities for things breaking
echo "DontCompress=true" >> $TEMPFILE
# Force a specific compatibility mode. This should be whatever was current at the time of the last transition build.
echo "CompatibilityMode=COMPAT_1250_EXACT" >> $TEMPFILE
# The URI at this point is "NEWKEY", we will replace it later on.
echo "URI=$URI" >> $TEMPFILE
echo "Identifier=$IDENT" >> $TEMPFILE
# Enable all verbosity flags. I guess we don't need this as it's a global insert anyway.
echo Verbosity=1023 >> $TEMPFILE
# Keep on retrying the insert until it succeeds.
echo MaxRetries=-1 >> $TEMPFILE
echo UploadFrom=direct >> $TEMPFILE
# TODO: wc -c instead of relying on the ls -l format?
echo DataLength=$(ls -l $INSERTFILE | cut -d " " -f 5) >> $TEMPFILE
# SECURITY: Persistence=reboot so the keys are never written to disk
echo Persistence=reboot >> $TEMPFILE
echo PriorityClass=$PCLASS >> $TEMPFILE
echo Global=true >> $TEMPFILE
echo End >> $TEMPFILE

# Construct a sed script to substitute in the real insert keys.
# On POSIX, the arguments of any script are visible to any process on the system.
# So it's vital that we not just include the keys in the arguments to sed.
# Hence we create a script here, in a tempfile.
# TODO just cat it
SCRIPT=$KEYS/script
echo -n "s/NEWKEY/" > $SCRIPT
cat $KEYS/keys | sed -n "s/NEWKEY=\"\(.*\)\"/\1/p" >> $SCRIPT
cat $SCRIPT | tr --delete "\n" > ${SCRIPT}.1 && mv ${SCRIPT}.1 $SCRIPT
echo "/" >> $SCRIPT
cat $TEMPFILE | sed -f $SCRIPT > $TEMPFILE.1
mv $TEMPFILE.1 $TEMPFILE

# Send the message followed by the data.
cat $TEMPFILE >> $TEMPFILE1
cat $INSERTFILE >> $TEMPFILE1
rm $TEMPFILE

done

SCRIPT=$KEYS/script

#cat $TEMPFILE1 | nc 127.0.0.1 $PORT | sed "/^URI=/d" &
cat $TEMPFILE1 | nc 127.0.0.1 $PORT | sed "/^URI=/d"

done

rm -Rf $KEYS
rm -Rf $TEMPFILE1

#jobs
#wait %1
#wait %2
#wait %3
#wait %4
